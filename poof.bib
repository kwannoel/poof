@Book{amop,
  title={The art of the metaobject protocol},
  author={Kiczales, Gregor and Des Rivieres, Jim and Bobrow, Daniel Gureasko},
  year={1991},
  publisher={MIT press}
}

@Book{tapl,
author = {Pierce, Benjamin C.},
title = {Types and Programming Languages},
year = {2002},
isbn = {0262162091},
publisher = {The MIT Press},
edition = {1st},
abstract = {A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems -- and of programming languages from a type-theoretic perspective -- has important applications in software engineering, language design, high-performance compilers, and security.This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}
}

@Misc{Adams89object-orientedprogramming,
  author = {Norman Adams and Jonathan Rees},
  title = {Object-Oriented Programming in Scheme},
  %url = "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.954",
  year = {1989}
}

@Article{dickey1992scheming,
  title={Scheming with objects},
  author={Dickey, Ken},
  %url={http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/scheme/oop/yasos/swob.txt},
  journal={AI Expert},
  volume={7},
  number={10},
  pages={24--33},
  year={1992}
}

@InProceedings{conf/tlca/Levy99,
	title = {Call-by-Push-Value: A Subsuming Paradigm.},
	year = {1999},
	author = {{Paul Blain Levy}},
	publisher = {Springer},
	booktitle = {Typed Lambda Calculi and Applications, 4th International Conference, TLCA'99, L'Aquila, Italy, April 7-9, 1999, Proceedings}
}

@InProceedings{dolstra2008nixos,
  title={NixOS: A purely functional Linux distribution},
  author={Dolstra, Eelco and L{\"o}h, Andres},
  booktitle={Proceedings of the 13th ACM SIGPLAN international conference on Functional programming},
  pages={367--378},
  year={2008}
}

@Misc{jsonnet,
    author = {Dave Cunningham},
    title = {Jsonnet},
    year = 2014,
    url = {https://jsonnet.org},
    urldate = {2021-03-11}
}

@Misc{Abadi97atheory,
    author = {Martín Abadi and Luca Cardelli},
    title = {A theory of objects},
    year = {1997}
}

@InProceedings{Borning77,
    author = {Alan Borning},
    title = {{ThingLab} --- an object-oriented system for building simulations using constraints'},
    booktitle={5th Internatoinal Conference on Artificial Intelligence},
    pages={497--498},
    month = {August},
    year = {1977}
}

@InProceedings{Rees82t:a,
    author = {Jonathan A. Rees and Norman I. Adams {IV}},
    title = {T: a dialect of LISP or, Lambda: the ultimate software tool},
    booktitle = {Symposium on Lisp and Functional Programming, ACM},
    year = {1982},
    pages = {114--122}
}

@InProceedings{chambers1989efficient,
author = {Chambers, C. and Ungar, D. and Lee, E.},
title = {An Efficient Implementation of SELF a Dynamically-Typed Object-Oriented Language Based on Prototypes},
year = {1989},
isbn = {0897913337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/74877.74884},
doi = {10.1145/74877.74884},
abstract = {We have developed and implemented techniques that double the performance of dynamically-typed object-oriented languages. Our SELF implementation runs twice as fast as the fastest Smalltalk implementation, despite SELF's lack of classes and explicit variables.To compensate for the absence of classes, our system uses implementation-level maps to transparently group objects cloned from the same prototype, providing data type information and eliminating the apparent space overhead for prototype-based systems. To compensate for dynamic typing, user-defined control structures, and the lack of explicit variables, our system dynamically compiles multiple versions of a source method, each customized according to its receiver's map. Within each version the type of the receiver is fixed, and thus the compiler can statically bind and inline all messages sent to self. Message splitting and type prediction extract and preserve even more static type information, allowing the compiler to inline many other messages. Inlining dramatically improves performance and eliminates the need to hard-wire low-level methods such as +,==, and ifTrue:.Despite inlining and other optimizations, our system still supports interactive programming environments. The system traverses internal dependency lists to invalidate all compiled methods affected by a programming change. The debugger reconstructs inlined stack frames from compiler-generated debugging information, making inlining invisible to the SELF programmer.},
booktitle = {Conference Proceedings on Object-Oriented Programming Systems, Languages and Applications},
pages = {49–70},
numpages = {22},
location = {New Orleans, Louisiana, USA},
series = {OOPSLA '89}
}


@InProceedings{bracha1990mixin,
author = {Bracha, Gilad and Cook, William},
title = {Mixin-Based Inheritance},
year = {1990},
isbn = {0897914112},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/97945.97982},
doi = {10.1145/97945.97982},
abstract = {The diverse inheritance mechanisms provided by Smalltalk, Beta, and CLOS are interpreted as different uses of a single underlying construct. Smalltalk and Beta differ primarily in the direction of class hierarchy growth. These inheritance mechanisms are subsumed in a new inheritance model based on composition of mixins, or abstract subclasses. This form of inheritance can also encode a CLOS multiple-inheritance hierarchy, although changes to the encoded hierarchy that would violate encapsulation are difficult. Practical application of mixin-based inheritance is illustrated in a sketch of an extension to Modula-3.},
booktitle = {Proceedings of the European Conference on Object-Oriented Programming on Object-Oriented Programming Systems, Languages, and Applications},
pages = {303–311},
numpages = {9},
location = {Ottawa, Canada},
series = {OOPSLA/ECOOP '90}
}

@article{10.1145/97946.97982,
author = {Bracha, Gilad and Cook, William},
title = {Mixin-Based Inheritance},
year = {1990},
issue_date = {Oct. 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/97946.97982},
doi = {10.1145/97946.97982},
abstract = {The diverse inheritance mechanisms provided by Smalltalk, Beta, and CLOS are interpreted as different uses of a single underlying construct. Smalltalk and Beta differ primarily in the direction of class hierarchy growth. These inheritance mechanisms are subsumed in a new inheritance model based on composition of mixins, or abstract subclasses. This form of inheritance can also encode a CLOS multiple-inheritance hierarchy, although changes to the encoded hierarchy that would violate encapsulation are difficult. Practical application of mixin-based inheritance is illustrated in a sketch of an extension to Modula-3.},
journal = {SIGPLAN Not.},
month = sep,
pages = {303–311},
numpages = {9}
}


@Article{gabriel1991clos,
  title={CLOS: Integrating object-oriented and functional programming},
  author={Gabriel, Richard P and White, Jon L and Bobrow, Daniel G},
  journal={Communications of the ACM},
  volume={34},
  number={9},
  pages={29--38},
  year={1991},
  publisher={ACM New York, NY, USA}
}

% April 2
@Misc{minsky08,
    author = {Yaron Minsky},
    title = {The {ML} sweet spot},
    year = 2008,
    url = {https://blog.janestreet.com/the-ml-sweet-spot/},
    urldate = {2021-03-14}
}

@Misc{DrWhoFPIT,
    author = {Unknown},
    title = {Fixed Point in Time},
    year = 2021,
    url = {https://tardis.fandom.com/wiki/Fixed_point_in_time},
    urldate = {2021-03-14}
}
% Maybe cite the last episode of this story instead, that explains the concept?
% https://en.wikipedia.org/wiki/Earthshock
% On citing TV series:
% https://www.easybib.com/guides/citation-guides/how-do-i-cite-a/how-to-cite-movie-tv-netflix/

@Misc{Barrett96amonotonic,
    author = {Kim Barrett and Bob Cassels and Paul Haahr and David A. Moon and Keith Playford and P. Tucker Withington},
    title = {A Monotonic Superclass Linearization for Dylan},
    year = {1996}
}
